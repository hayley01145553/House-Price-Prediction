#############################
#####K-Nearest Neighbors#####
#############################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
imputed.1nn
#############################
#####K-Nearest Neighbors#####
#############################
library(class)
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
#############################
#####K-Nearest Neighbors#####
#############################
library(class)
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
##################################
#####Visualizing Missing Data#####
##################################
library(VIM) #For the visualization and imputation of missing values.
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
imputed.1nn
#Imputing using 5NN.
imputed.5nn = kNN(missing.data, k=5)
imputed.5nn
#Imputing using 9NN.
imputed.9nn = kNN(missing.data, k=9)
imputed.9nn
### Imputing with caret
### Note: knnImpute with caret::preProcess force normalization
#Imputing using 1NN.
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
imputed.1nn
#Imputing using 5NN.
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5) #mean(最近的5个)
imputed.5nn = predict(pre.5nn, missing.data)
#Imputing using 9NN.
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9) #center and scale #(xi-mean)/sd
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
#K-Nearest Neighbors regression on the sleep dataset.
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
#Using 8 nearest neighbors.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
iris.example = iris[, c(1, 2, 5)] #For illustration purposes, pulling only the
#Throwing some small amount of noise on top of the data for illustration
#purposes; some observations are on top of each other.
set.seed(0)
iris.example$Sepal.Length = jitter(iris.example$Sepal.Length, factor = .5)
iris.example$Sepal.Width = jitter(iris.example$Sepal.Width, factor= .5)
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 35,
main = "Sepal Measurements of Iris Data")
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .95)
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .15)
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .05)
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
col.vec[missing.vector] = "purple" #Creating a new color vector to
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica", "NA"),
pch = 16, col = c("red", "green", "blue", "purple"), cex = .75)
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
#Inspecting the Voronoi tesselation for the complete observations in the iris
#dataset.
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
#Adding the observations that are missing species information.
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = 16, col = "white")
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = "?", cex = .66)
#Conducting a 1NN classification imputation.
iris.imputed1NN = kNN(iris.example, k = 1)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
#Conducting a 12NN classification imputation based on the square root of n.
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2) #everything other than Species
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
#Separating the complete and missing observations for use in the kknn() function.
iris
#Separating the complete and missing observations for use in the kknn() function.
iris.example
complete
missing
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2) #everything other than Species
summary(iris.euclidean)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
help(titanic3)
??titanic3
# Your code here
?PASWR
# Your code here
help("Titanic3")
# Your code here
help("Titanic")
# Your code here
library(PASWR)
help("titanic3")
install.packages("PASWR")
help("titanic3")
# Your code here
head(titanic3)
# Your code here
titanic3
# Your code here
help(titanic3)
# Your code here
library(PASWR)
help(titanic3)
library(mice)
# Your code here
library(PASWR)
help(titanic3)
library(mice)
dim(titanic3)
sum(is.na(titanic3))
mice::md.pattern(titanic3)
library(VIM)
VIM::aggr(titanic3)
# Your code here
complete.cases(titanic3)
# Your code here
mice::md.pattern(complete.cases(titanic3))
# Your code here
sum(!complete.cases(data))
# Your code here
sum(!complete.cases(titanic3))
mice::md.pattern(titanic3)
# Your code here
sum(complete.cases(titanic3))
#percentage
nrow(titanic3)
dim(titanic3)
sum(!complete.cases(titanic3))/nrow(titanic3)
# Your code here
is.na(titanic3)
# Your code here
sum(is.na(titanic3))
sum(!complete.cases(titanic3)) #numbers of rows with NAs
sum(!complete.cases(titanic3))/nrow(titanic3)
#1452
sum(is.na(titanic3))/(nrow(titanic3)*ncol(titanic3))
sum(is.na(titanic3))
table(titanic3)
table(is.na(titanic3)
table(is.na(titanic3))
table(is.na(titanic3))
#1452
sum(is.na(titanic3))/(nrow(titanic3)*ncol(titanic3))
1452/(1452+16874)
sapply(titanic3,function(x)sum(is.na(x)))
mice::md.pattern(titanic3)
lapply(titanic3,function(x)sum(is.na(x)))
sapply(titanic3,function(x)sum(is.na(x)))
# Your code here
help("titanic3")
# Your code here
plot(titanic3$age)
# Your code here
hist(titanic3$age)
mean(titanic3$age,na.rm = T)
titanic3$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
# Your code here
library(PASWR)
help(titanic3)
head(titanic3)
is.na(titanic3)
sum(!complete.cases(titanic3)) #numbers of rows with NAs 1190 T=1
sum(!complete.cases(titanic3))/nrow(titanic3) #0.9090909
# Your code here
sum(is.na(titanic3))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(PASWR)
help(titanic3)
sapply(titanic3,function(x)sum(is.na(x)))
#variables:fare(1 NA), age(263), body(1188) contain NAs
library(VIM)
VIM::aggr(titanic3)
# fare(1/1309), age(20%), body(>80%)
# Your code here
sum(complete.cases(titanic3))
titanic3
sapply(titanic3,function(x)sum(is.na(x)))
VIM::aggr(titanic3)
# Your code here
sum(complete.cases(titanic3))
sum(!complete.cases(titanic3)) #numbers of rows with NAs 1190 T=1
missing.data = titanic3
#Mean value imputation
missing.data = titanic3$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
missing.data = titanic3
#Mean value imputation
missing.data = titanic3$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
mean(titanic3$age,na.rm = T)
sapply(titanic3,sd)
sapply(titanic3,sd(na.rm=T))
sd(titanic3$age,na.rm = T)
sd(missing.data$age, na.rm = T)
#Mean value imputation
missing.data = titanic3
sd(missing.data$age, na.rm = T)
# Your code here
hist(titanic3$age)
hist(missing.data$age)
sapply(titanic3,function(x)sum(is.na(x)))
# Your code here
hist(titanic3$age)
missing.data = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
sd(missing.data$age, na.rm = T)
#Mean value imputation
missing.data = titanic3
missing.data = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
# Your code here
hist(titanic3$age)
mean(titanic3$age,na.rm = T)
sd(titanic3$age,na.rm = T)
#Mean value imputation
missing.data = titanic3
missing.data = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
sd(missing.data$age, na.rm = T)
missing.data$age = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
#Mean value imputation
missing.data = titanic3
missing.data$age = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
sd(miss$age, na.rm = T)
sd(missing.data$age, na.rm = T)
#Mean value imputation
missing.data = titanic3
missing.data$age = missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data,na.rm=T)
mean(missing.data$age,na.rm=T)
sd(missing.data$age, na.rm = T)
missing.data$age
#Mean value imputation
missing.data = titanic3
missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
mean(missing.data$age,na.rm=T)
sd(missing.data$age, na.rm = T)
sd(titanic3$age,na.rm = T)
sd(missing.data$age, na.rm = T)
hist(missing.data$age)
# Your code here
hist(titanic3$age)
cor(missing.data, use = "complete.obs")
# Your code here
hist(titanic3$age)
# Your code here
titanic3
hist(titanic3$age)
hist(missing.data$age)
mean(missing.data$age,na.rm=T)
hist(missing.data$age)
# Your code here
missing.data=titanic3
library(Hmisc)
#Mean value imputation
missing.data = titanic3
missing.data$age[is.na(titanic3$age)]=mean(titanic3$age,na.rm = T)
is.imputed(missing.data.x2)
is.imputed(missing.data$age)
# Your code here
titanic3
is.na(titanic3$age)
titanic3
sapply(titanic3,function(x)sum(is.na(x)))
library(VIM)
VIM::aggr(titanic3)
titanic3
VIM::aggr(titanic3)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(PASWR)
titanic3
library(VIM)
VIM::aggr(titanic3)
is.na(titanic3$age)
hist(titanic3$age)
mean(titanic3$age,na.rm = T)
sd(titanic3$age,na.rm = T)
#Mean value imputation
missing.data = titanic3
missing.data$age[is.na(missing.data$age)]=mean(missing.data$age,na.rm = T)
mean(missing.data$age,na.rm=T)
sd(missing.data$age, na.rm = T)
hist(missing.data$age)
hist(titanic3$age)
hist(missing.data$age)
imputed.age=impute(missing.data$age,"random")
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
#Mean value imputation method 4.
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
# Your code here
missing.data=titanic3
imputed.age=impute(missing.data$age,"random")
##################################
#####Simple Random Imputation#####
##################################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
imputed.age=impute(missing.data$age,random)
imputed.age=impute(missing.data$age,fun=random)
imputed.age=impute(missing.data$age,fun='random')
imputed.age=impute(missing.data$age,"random")
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
library(Hmisc)
imputed.age=impute(missing.data$age,"random")
head(missing.data)
# Your code here
titanic3
imputed.age=impute(titanic3$age,"random")
set.seed(0)
imputed.age=impute(titanic3$age,"random")
sd(missing.data$age, na.rm = T) #sd becomes smaller, the deviation decreases
hist(missing.data$age) #higher frequency at the mean
#Mean value imputation
missing.data = titanic3
missing.data$age[is.na(missing.data$age)]=mean(missing.data$age,na.rm = T)
mean(missing.data$age,na.rm=T)
sd(missing.data$age, na.rm = T) #sd becomes smaller, the deviation decreases
hist(missing.data$age) #higher frequency at the mean
library(Hmisc)
is.imputed(missing.data$age)
set.seed(0)
imputed.age=impute(missing.data$age,"random")
imputed.age=impute(missing.data$age,"random")
# Your code here
missing.data=titanic3
head(missing.data)
library(Hmisc)
imputed.age=impute(missing.data$age,"random")
# Your code here
missing.data = titanic3
imputed.fare = Himsc::impute(missing.data$fare,'random')
imputed.fare = Hmisc::impute(missing.data$fare,'random')
imputed.age=Hmisc::impute(missing.data$age,"random")
imputed.age
summary(imputed.age)
is.imputed(imputed.age)
missing.data$age=imputed.age
hist(missing.data$age)
hist(titanic3$age)
hist(missing.data$age)
# Your code here
missing.data=titanic3
imputed.age=Hmisc::impute(missing.data$age,"random")
is.imputed(imputed.age)
missing.data$age=imputed.age
hist(titanic3$age)
hist(missing.data$age)
is.imputed(imputed.fare)
# Your code here
missing.data = titanic3
is.na(missing.data$fare)
sum(is.na(missing.data$fare))
missing.data$fare=imputed.fare
missing.data$fare[is.imputed(imputed.fare)==T]
# Your code here
library(ggplot2)
# Your code here
missing.age=titanic3
imputed.age=Hmisc::impute(missing.data$age,"random")
imputed.age
missing.age$age=imputed.age
missing.age$age=imputed.age
hist(titanic3$age)
hist(missing.age$age)
# Your code here
missing.fare = titanic3
missing.fare$fare=imputed.fare
missing.fare$fare[is.imputed(imputed.fare)==T]
？impute
?impute
table(is.na(titanic3))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
set.seed(0)
fare.randomimpute = Hmisc::impute(titanic3$fare, "random")
summary(fare.randomimpute) #The one value was imputed to be $69.55
col.vec = NULL
col.vec[titanic3$pclass == "1st"] = "red"
col.vec[titanic3$pclass == "2nd"] = "blue"
col.vec[titanic3$pclass == "3rd"] = "green"
plot(age.randomimpute, fare.randomimpute, col = col.vec)
fare.randomimpute = Hmisc::impute(titanic3$fare, "random")
summary(fare.randomimpute) #The one value was imputed to be $69.55
# 6 Impute using mean value imputation for the age variable.
# 7 Impute using simple random imputation for the age variable.
library(Hmisc)
set.seed(0)
age.meanimpute = Hmisc::impute(titanic3$age, mean)
age.randomimpute = Hmisc::impute(titanic3$age, "random")
plot(density(age.meanimpute), col = "red",
main = "Imputation Methods for Age")
lines(density(age.randomimpute), col = "green")
lines(density(titanic3$age, na.rm = TRUE), col = "blue")
legend("topright", c("Original", "Mean Imputed", "Random Imputed"),
col = c("blue", "red", "green"), lwd = 1)
#Mean Value Imputation: The mean value inputation tends to skew the distribution
#heavily towards the average value of the original dataset. This makes a local
#mode right at the mean, and can make our data appear numerically more centralized
#than it actually is in reality.
set.seed(0)
fare.randomimpute = Hmisc::impute(titanic3$fare, "random")
summary(fare.randomimpute) #The one value was imputed to be $69.55
col.vec = NULL
col.vec[titanic3$pclass == "1st"] = "red"
col.vec[titanic3$pclass == "2nd"] = "blue"
col.vec[titanic3$pclass == "3rd"] = "green"
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
#Higher fares seem to be associated with 1st class tickets. The older a passenger
#is, the more likely they seem to have an upper-class ticket.
plot(age.randomimpute, fare.randomimpute, col = col.vec)
legend("topleft", c("1st", "2nd", "3rd"),
pch = 1, col = c("red", "blue", "green"))
new.people = data.frame(age = c(50, 10), fare = c(400, 100), pclass = NA)
points(new.people, pch = 16)
## use ggplot2
imputed.titanic= as.data.frame(cbind(age.randomimpute,fare.randomimpute,pclass=titanic3$pclass))
ggplot(imputed.titanic,aes(age.randomimpute, fare.randomimpute,colour=as.factor(pclass))) +
geom_point() +
annotate(x=50,y=400,geom = "point",color=I("black"))+annotate(x=10,y=100,geom = "point",color=I("black"))
setwd("~/Desktop/House-Price-Prediction/data")
library(readr)
train <- read_csv("train.csv")
View(train)
df = read.csv(train.csv)
df = read.csv('train.csv')
View(df)
df[df$BsmtCond == 'NA']
df$BsmtCond == 'NA'
